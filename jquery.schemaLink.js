/*jslint browser: true*/
/*global jQuery*/

/** 
 * @fileOverview contains the schemaLink jQuery plugin code.
 * @version: 0.1
 * @author John Robert Allan john@johnrobertallan.com
 * @author Habanero Consulting Group jallan@habaneroconsulting.com
 * @requires: jQuery
 *
 * @license Licensed under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 */

/**
 * See (http://jquery.com/).
 * @name jQuery
 * @class 
 * See the jQuery Library  (http://jquery.com/) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 */

/**
 * See (http://jquery.com/)
 * @name fn
 * @class 
 * See the jQuery Library  (http://jquery.com/) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 * @memberOf jQuery
 */

/**
 * schemaLink - a jQuery plugin to parse schema.org formatted markup and wrap it in a useful anchor tag
 *
 * @class schemaLink
 * @memberOf jQuery.fn
 */

(function ($) {
    "use strict";

    $.fn.schemaLink = function (options) {

        var methods = {},
            settings = $.extend({
                'title':                'link to more information',
                'class':                'schemaLink',
                'openInNewWindow':      true,
                'reuseWindow':          true,
                'windowName':           'schemaLinkWindow',
                'dataAttribute':        'itemprop',
                'dataTemplate': {
                    'streetAddress':    null,
                    'addressLocality':  null,
                    'addressRegion':    null,
                    'postalCode':       null,
                    'addressCountry':   null
                },
                'defaultDeviceName':    'default',
                'urlTemplates': {
                    'default':      'http://maps.google.com?q={streetAddress} {addressLocality} {addressRegion} {postalCode} {addressCountry}',
                    'ios':          'http://maps.apple.com?saddr=Current Location&daddr={streetAddress} {addressLocality} {addressRegion} {postalCode} {addressCountry}',
                    'android':      'geo:0,0?q={streetAddress} {addressLocality} {addressRegion} {postalCode} {addressCountry}',
                    'wp7':          'maps:{streetAddress} {addressLocality} {addressRegion} {postalCode} {addressCountry}',
                    'wp8':          'maps:?where={streetAddress} {addressLocality} {addressRegion} {postalCode} {addressCountry}',
                    'blackberry':   'javascript:blackberry.launch.newMap({"address":{"address1":"{streetAddress}","city":"{addressLocality}","country":"{addressCountry}","stateProvince":"{addressRegion}","zipPostal":"{postalCode}"}});'
                },
                'deviceMap': [
                    {
                        'name': 'ios',
                        'test': /ipad|ipod|iphone/
                    },
                    {
                        'name': 'android',
                        'test': /android/
                    },
                    {
                        'name': 'blackberry',
                        'test': /blackberry/
                    },
                    {
                        'name': 'wp7',
                        'test': /windows phone os 7/
                    },
                    {
                        'name': 'wp8',
                        'test': /windows phone 8/
                    }
                ],
                'deviceType': null
            }, options);

        /**
         * Returns a string generated by replacing placeholders in the string with data from the object
         * @param {string} s template
         * @param {object} o object
         * @returns {string}
         */
        methods.JSONStringBuilder = function (s, o) {
            var k;
            for (k in o) {
                if (o.hasOwnProperty(k)) {
                    s = s.replace('{' + k + '}', o[k]);
                }
            }
            return s;
        };

        /**
         * Returns an encoded URL for the new anchor tag which will wrap the target HTML
         * @param {string} deviceType the name of the detected device
         * @param {object} data the data retrieved from the HTML
         * @returns {string}
         */
        methods.buildURL = function (deviceType, data) {
            var t, url;
            t = settings.urlTemplates[deviceType];
            url = methods.JSONStringBuilder(t, data);
            url = encodeURI(url);
            return url;
        };

        /**
         * Returns an object containing the schema data from the target element
         * @param {object} jQuery object of the parent element containing all the elements we wish to extract data from
         * @returns {object}
         */
        methods.getSchemaData = function (el) {
            var schemaData, k;
            //get the data object template from settings
            schemaData = settings.dataTemplate;
            //iterate over the object and get the matching content from each DOM element
            //object key, template marker and dataAttribute value must all match
            for (k in schemaData) {
                if (schemaData.hasOwnProperty(k)) {
                    schemaData[k] = el.find('[' + settings.dataAttribute + '="' + k + '"]').text();
                }
            }
            return schemaData;
        };

        /**
         * Returns the name of the matching device from settings.deviceMap by matching the match field with the user-agent string
         * @returns {string}
         */
        methods.getDeviceType = function () {
            var ua, pattern, i, l, name;
            ua = window.navigator.userAgent.toLowerCase();
            l = settings.deviceMap.length;
            name = settings.defaultDeviceName;

            // loop through the deviceMap and test the user-agent string against [i].test
            // when true return the associated [i].name
            for (i = 0; i < l; i += 1) {
                pattern = new RegExp(settings.deviceMap[i].test);
                if (pattern.test(ua)) {
                    name = settings.deviceMap[i].name;
                    break;
                }
            }

            return name;
        };

        //if not explicitly set by options, determine the device type
        if (settings.deviceType === null) {
            settings.deviceType = methods.getDeviceType();
        }

        return this.each(function () {
            var $this, $a, href, schemaData;

            $this = $(this);

            //pull schema data from the HTML
            schemaData = methods.getSchemaData($this);

            //build the URL using the location data and device type
            href = methods.buildURL(settings.deviceType, schemaData);

            //create the anchor tag
            $a = $('<a>').attr({
                'href': href,
                'title': settings.title,
                'class': settings.class,
                'target': (settings.openInNewWindow) ? (settings.reuseWindow) ? settings.windowName : '_blank' : '_self'
            });

            //inject the anchor tag into the DOM
            $this.wrapInner($a);
        });

    };
}(jQuery));